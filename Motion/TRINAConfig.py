from math import sqrt,pi
import math
left_limb_address = '10.1.1.30'
right_limb_address = '10.1.1.20'
## The payload and cog has to be calibrated...
# calibrated result for robotiq gripper, in klampt frame x: array([ 0.86125143,  0.05865107,  0.00479324, -0.00341504])
# The klampt in UR EE frame rotation matrix is
# 0 -0.707   0.707
# 0 - 0.707  -0.707
# 1  0        0
##These are for the Righthand gripper
# left_limb_payload = 0.86125
# left_limb_cog = [-0.0058,-0.001,0.05865] #this needs to be in UR EE frame
left_limb_payload = 1.025 
left_limb_cog = [0.0,0.0,0.08] 

#estimated for the pusher, need to run the calibrater
right_limb_payload = 0.0 #0.4
right_limb_cog = [0.0,0.0,0.06]
left_Robotiq = True
right_Robotiq = False
left_Robotiq_type = 'parallel'
right_Robotiq_type = 'parallel'
ur5e_control_rate = 0.004 #250 Hz


# left_limb_gravity_upright = [-4.91,-4.91,-6.93672]  #R_upright_newlocal * left_limb_gravity_upright = new gravity vector
# right_limb_gravity_upright = [4.91,-4.91,-6.93672]

# R_local_global_upright_left = [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),-sqrt(0.5),-sqrt(0.25),-sqrt(0.25),0,sqrt(0.5),-sqrt(0.5)]
# R_local_global_upright_right = [-sqrt(0.5),-sqrt(0.25),sqrt(0.25),-sqrt(0.5),sqrt(0.25),-sqrt(0.25),0,-sqrt(0.5),-sqrt(0.5)]
# R_local_global_upright_left = [sqrt(0.5),sqrt(0.25),sqrt(0.25),-sqrt(0.5),sqrt(0.25),sqrt(0.25),0,-sqrt(0.5),sqrt(0.5)] ## this is used when dealing with gravity vector
# R_local_global_upright_right = [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),sqrt(0.5),sqrt(0.25),sqrt(0.25),0,sqrt(0.5),sqrt(0.5)]


simulated_robot_control_rate = 0.004 #250Hz
limb_velocity_limits = [2.0,2.0,2.0,2.0,2.0,2.0]
limb_EE_velocity_limits = [1.0,1.0,1.0,1.0,1.0,1.0]
epsilon = 0.01
limb_position_upper_limits = [2.0*pi-epsilon,2.0*pi-epsilon,2.0*pi-epsilon,2.0*pi-epsilon,2.0*pi-epsilon,2.0*pi-epsilon]
limb_position_lower_limits = [-2.0*pi+epsilon,-2.0*pi+epsilon,-2.0*pi+epsilon,-2.0*pi+epsilon,-2.0*pi+epsilon,-2.0*pi+epsilon]
collision_check_interval = 0.1

#commonly used arm configurations for Anthrax
left_untucked_config = [-0.2028,-2.1063,-1.610,3.7165,-0.9622,0.0974]
def mirror_arm_config(config):
    RConfig = []
    RConfig.append(-config[0])
    RConfig.append(-config[1]-math.pi)
    RConfig.append(-config[2])
    RConfig.append(-config[3]+math.pi)
    RConfig.append(-config[4])
    RConfig.append(-config[5])
    return RConfig

right_untucked_config = mirror_arm_config(left_untucked_config)
left_tabletop_config = [-1.2396209875689905, -2.6281658611693324, -1.0119028091430664, 5.456587779312887, -2.3149259726153772, 0.15132474899291992]
right_tabletop_config = mirror_arm_config(left_tabletop_config)

right_camera_transform = ([0.009867833875554, -0.49431948695175937, 0.8692242925012816, -0.002675548800660542, -0.8692765561510516, -0.49431883472591204,\
     -0.9999477322806525, -0.0025522041293258445, 0.009900452558469577], [-0.049899038919714755, -0.06534763981440639, -0.016062509431686134])

left_right_transform = ([-0.06939732886469613, -0.8820629769708032, -0.4659923984399842, -0.038975726714309905, 0.46915927983703953, -0.8822530605613572,\
     -0.9968274191019911, 0.04306361341311882, 0.0669374463679997], [-0.038713496576159745, 0.022955546540886766, -0.051000723894234594])

# fixed_camera_transform = ([0.04104058191379467, 0.998652726497924, -0.031755353791750186, 0.9984720664451047, -0.04216872752345113, -0.03571177603949744, \
#     -0.03700274537138246, -0.03024120165130811, -0.9988574806035472], [ 0.66466187, -0.07338096,  1.66003641])
# fixed_camera_transform = ([0.005248274898683479, 0.9993539733973044, -0.0355540639816013, 0.9997319603764425, -0.00604535806498215, -0.022348625186837633,
#  -0.022549124427867426, -0.035427242355087554, -0.9991178346354601], [0.6351874903178754, -0.03384883754825452, 1.5310900676555192])
fixed_camera_transform =  ([0.0293633879383547, 0.9942902549394962, -0.10258986490455504, 0.9995310546124988, -0.028315264555203064, 0.01165833000032483, 0.008686904742736638, -0.10288408392711645, -0.9946554192083151], [-0.028083791130160574, -0.5401533284932588, 1.5767650184958495])

right_calibration_configs = [[3.33986234664917, -3.322994371453756, -0.6658143997192383, -2.3918358288206996, 1.4727654457092285, -0.896860424672262],\
    [3.3854470252990723, -3.3656560383238734, -0.6936273574829102, -2.3209434948363246, 1.518139362335205, -0.9013150374041956],\
    [3.4194207191467285, -3.4372788868346156, -0.6287260055541992, -2.3865486584105433, 1.5337815284729004, -1.0402267614947718],\
    [3.43381929397583, -3.3902818165221156, -0.721583366394043, -2.263005395928854, 1.4576497077941895, -1.071777645741598],\
    [3.5233826637268066, -3.5750314197936, -0.5024843215942383, -2.518693586389059, 1.3655476570129395, -1.0324166456805628],\
    [3.5087924003601074, -3.4548474750914515, -0.8335199356079102, -1.8790680370726527, 1.8047070503234863, -1.1198418776141565],\
    [3.6638216972351074, -3.497162004510397, -0.7727212905883789, -2.457905431787008, 1.5138936042785645, -0.9053271452533167],\
    [3.6174168586730957, -3.4163457355894984, -0.8682794570922852, -2.337227006951803, 1.5596661567687988, -0.9574416319476526],\
    [3.55839204788208, -3.322672029534811, -0.9702520370483398, -2.20080628017568, 1.6226096153259277, -1.0225194136248987],\
    [3.529858112335205, -3.2681218586363734, -1.0645933151245117, -2.011527200738424, 1.755601406097412, -1.1057890097247522],\
    [3.4414544105529785, -3.1359578571715296, -1.2078733444213867, -1.7831484280028285, 1.8661236763000488, -1.2083967367755335],\
    [3.4011759757995605, -3.0888921223082484, -1.2472543716430664, -1.7220264873900355, 1.925011157989502, -1.2440884749041956],\
    [3.60380220413208, -2.7684384785094203, -1.7136564254760742, -1.4290126127055665, 1.9571795463562012, -1.322310749684469],\
    [3.639296054840088, -2.7812444172301234, -1.6776800155639648, -1.530872182255127, 1.7949700355529785, -1.227380100880758],\
    [3.677734851837158, -2.8226758442320765, -1.637589454650879, -1.6234671078123988, 1.7292637825012207, -1.2165053526507776],\
    [3.6898655891418457, -2.8370572529234828, -1.6121187210083008, -1.6945377788939417, 1.677046298980713, -1.2101333777057093],\
    [3.7454686164855957, -2.9023591480650843, -1.5530805587768555, -1.826040884057516, 1.5883784294128418, -1.1867650190936487],\
    [3.7807278633117676, -2.9396192036070765, -1.545058250427246, -1.796741624871725, 1.6236538887023926, -1.1866934935199183]]

left_calibration_configs = [[-3.688338104878561, -0.39242060602221684, 1.7853015104876917, 4.275573893184326, -1.5787065664874476, -4.665790383015768],\
    [-3.754063431416647, -0.31406863153491216, 1.7572100798236292, 4.279964132899902, -1.6169121901141565, -4.7042205969439905],\
    [-3.8406665960894983, -0.22866614282641606, 1.6832736174212855, 4.421629114741943, -1.5473831335650843, -4.689986054097311],\
    [-3.858246628438131, -0.16291125238452153, 1.5489485899554651, 4.778027999192037, -1.4449837843524378, -4.667346779500143],\
    [-3.8758495489703577, -0.14149601877246099, 1.5162680784808558, 4.878351676255026, -1.3727520147906702, -4.667251412068502],\
    [-3.889954392110006, -0.1153910917094727, 1.4773524443255823, 4.992350089340963, -1.314617935811178, -4.6740997473346155],\
    [-3.862826172505514, -0.06934721887622075, 1.3883326689349573, 5.174541461258688, -1.427765194569723, -4.664832894002096],\
    [-3.8519914785968226, -0.08601172388110356, 1.4101298491107386, 5.111653792649069, -1.472175423298971, -4.652669731770651],\
    [-3.8324621359454554, -0.13133223474536138, 1.4800131956683558, 4.927755343704977, -1.551781956349508, -4.629751030598776],\
    [-3.802272621785299, -0.1706431669047852, 1.5481684843646448, 4.741295325547018, -1.6761162916766565, -4.690560166035787],\
    [-3.783041779194967, -0.16086752832446294, 1.5388110319720667, 4.720509993820944, -1.6998274962054651, -4.6426971594439905],\
    [-3.7592552343951624, -0.19812949121508794, 1.6270392576800745, 4.477007074947021, -1.8004005591021937, -4.633436981831686],\
    [-3.7252071539508265, -0.17647536218676763, 1.5807822386371058, 4.602585478419922, -1.7451098600970667, -5.833719078694479],\
    [-3.716635529194967, -0.12958414972338872, 1.4814017454730433, 4.854518401413717, -1.7830289045916956, -5.77025014558901],\
    [-3.6990230719195765, -0.1058696073344727, 1.4370501677142542, 4.962761390000143, -1.8601086775409144, -5.794239346181051],\
    [-3.6868179480182093, -0.08916171014819341, 1.4079917112933558, 5.035769927292623, -1.9148519674884241, -5.807995621358053],\
    [-3.6791961828814905, -0.07872946680102544, 1.3906291166888636, 5.080684172898092, -1.9495962301837366, -5.815388504658834],\
    [-3.687439743672506, -0.15235884607348638, 1.4710505644427698, 5.07419632652358, -1.957698170338766, -5.814645592366354]]

##for bubonic
fixed_calibration_configs = [[3.663269519805908, -2.873592515985006, -0.946619987487793, -2.0261970959105433, 0.5460543632507324, 1.89994478225708],\
    [3.651876926422119, -2.792572160760397, -1.130070686340332, -1.9345385036864222, 0.5429315567016602, 1.9023222923278809],\
    [3.6349873542785645, -2.726802965203756, -1.2957086563110352, -1.8226782284178675, 0.527616024017334, 1.8884758949279785],\
    [3.620509624481201, -2.71010222057485, -1.338608741760254, -1.8808890781798304, 0.5511713027954102, 1.936023235321045],\
    [3.5914225578308105, -2.6394249401488246, -1.5329294204711914, -1.7399670086302699, 0.5239520072937012, 1.9158577919006348],\
    [3.6605076789855957, -2.7099458179869593, -1.5490942001342773, -1.6952702007689417, 0.6155009269714355, 1.9331393241882324],\
    [3.679295063018799, -2.7573281727232875, -1.4025239944458008, -1.8028532467284144, 0.6333556175231934, 1.9433960914611816],\
    [3.7042698860168457, -2.854610582391256, -1.1363744735717773, -1.9819947681822718, 0.6570777893066406, 1.9562382698059082],\
    [3.770477771759033, -2.965850969354147, -1.0050897598266602, -2.0257183514037074, 0.7203855514526367, 1.9868998527526855],\
    [3.76163911819458, -2.903656145135397, -1.1713361740112305, -1.9187857113280238, 0.7118792533874512, 1.9830317497253418],\
    [3.7288146018981934, -2.779468675652975, -1.5645761489868164, -1.6382624111571253, 0.6804919242858887, 1.9681353569030762],\
    [3.8592896461486816, -2.9087335071959437, -1.589625358581543, -1.3249672216228028, 0.8995709419250488, 1.6947131156921387],\
    [3.8720641136169434, -3.0174275837340296, -1.1611337661743164, -1.6492182217040003, 0.9110636711120605, 1.7018961906433105],\
    [4.01080846786499, -3.2524262867369593, -0.9013338088989258, -1.5992876491942347, 1.1307988166809082, 1.56571626663208],\
    [4.108555316925049, -3.3608437977232875, -0.8692159652709961, -1.5434511464885254, 1.2156891822814941, 1.618441104888916],\
    [4.107872486114502, -3.278377672235006, -1.1774377822875977, -1.302635983829834, 1.3686604499816895, 1.4812722206115723],\
    [4.178168773651123, -3.398801942864889, -1.0458669662475586, -1.251958207493164, 1.5369505882263184, 1.342543125152588],\
    [4.146667957305908, -3.5022794208922328, -0.6701593399047852, -1.5233867925456543, 1.5107369422912598, 1.325087070465088]]

## Anthrax
# fixed_calibration_configs = [[0.7858576774597168, 0.3395234781452636, -0.4835023880004883, -1.129763440494873, 2.0836281776428223, -0.29293853441347295],\
#     [0.7876238822937012, 0.5427781778522949, -0.8536539077758789, -1.102635220890381, 1.706113338470459, -0.4081376234637659],\
#     [0.7876238822937012, 0.5427781778522949, -0.8536539077758789, -1.102635220890381, 1.706113338470459, -0.4081376234637659],\
#     [0.7667994499206543, 0.34439389287915034, -0.6551532745361328, -0.8170297902873536, 2.076389789581299, -0.6739485899554651],\
#     [0.7689743041992188, 0.6103879648395996, -1.1951065063476562, -0.5441764158061524, 2.077348232269287, -0.6761840025531214],\
#     [0.6562056541442871, 0.7695600229450683, -1.3006315231323242, -1.0830553335002442, 2.073681354522705, -0.5479415098773401],\
#     [0.6682453155517578, 0.7613040643879394, -1.302093505859375, -1.070455865269043, 2.1790337562561035, -0.5672543684588831],\
#     [0.6777515411376953, 0.6079389291950683, -1.0026273727416992, -1.2231677335551758, 2.178626537322998, -0.578841511403219],\
#     [0.6880507469177246, 0.29529492437329097, -0.3745298385620117, -1.5458014768413086, 2.1780991554260254, -0.5913499037372034],\
#     [0.6058783531188965, 0.39253918706860347, -0.40106678009033203, -1.559147672062256, 2.1801838874816895, -0.49125367799867803],\
#     [0.5946269035339355, 0.6075097757526855, -0.8237085342407227, -1.3436811727336426, 2.180123805999756, -0.47758323351015264],\
#     [0.582514762878418, 0.7473127084919433, -1.0885639190673828, -1.2101963323405762, 2.179919719696045, -0.4627755323993128],\
#     [0.49260568618774414, 0.8736516672321777, -1.1660490036010742, -1.196690396671631, 2.1754040718078613, -0.35347253481020147],\
#     [0.5093803405761719, 0.7556287485310058, -0.9516134262084961, -1.3164375585368653, 2.5289406776428223, -0.3822138945208948],\
#     [0.5199952125549316, 0.6568185526081542, -0.7665700912475586, -1.4178341192058106, 2.529456615447998, -0.4006846586810511],\
#     [0.4620037078857422, 0.8748313623615722, -1.114419937133789, -1.2060693067363282, 2.5245699882507324, -0.3003795782672327],\
#     [0.47318315505981445, 0.8033057886311035, -0.985896110534668, -1.2786978048137208, 2.525911808013916, -0.31955176988710576],\
#     [0.4765739440917969, 0.7613765436359863, -0.9030475616455078, -1.3246677678874512, 2.529384136199951, -0.32714873949159795]]

###
#local in global R
def get_wrench_R_left(name):
    if ((name == "anthrax")|(name == 'anthrax_lowpoly')|(name == 'seed')):
        return [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),-sqrt(0.5),-sqrt(0.25),-sqrt(0.25),0,sqrt(0.5),-sqrt(0.5)]
    elif (name == "bubonic"):
        return [0.7071067811865476, 0.49999999999999994, -0.5, -0.7071067811865476, 0.49999999999999994, -0.5, 0.0, 0.7071067811865476, 0.7071067811865476]

    return

def get_wrench_R_right(name):
    if ((name == "anthrax")|(name == 'anthrax_lowpoly')|(name == 'seed')):
        return [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),-sqrt(0.5),-sqrt(0.25),-sqrt(0.25),0,sqrt(0.5),-sqrt(0.5)]
    elif (name == "bubonic"):
        return [-0.7071067811865476, 0.49999999999999994, 0.5, -0.7071067811865476, -0.49999999999999994, -0.5, 0.0, -0.7071067811865476, 0.7071067811865476]  

    return


def get_left_gravity_vector_upright(name):
    if ((name == "anthrax")|(name == 'anthrax_lowpoly')|(name == 'seed')):
        return [-4.91,-4.91,-6.93672]
    elif (name == "bubonic"):
        return [-4.91,-4.91,6.93672]

def get_right_gravity_vector_upright(name):
    if ((name == "anthrax")|(name == 'anthrax_lowpoly')|(name == 'seed')):
        return [4.91,-4.91,-6.93672]
    elif (name == "bubonic"):
        return [4.91,-4.91,6.93672]    

def get_left_tool_link_N(name):
    if((name == "anthrax")|(name == "anthrax_lowpoly")|(name == "bubonic")):
        return 13
    elif((name == "seed")|(name == "half_anthrax")):
        return 16

def get_right_tool_link_N(name):
    if((name == "anthrax")|(name == "anthrax_lowpoly")|(name == "bubonic")):
        return 21
    elif((name == "seed")|(name == "half_anthrax")):
        return 41
def get_left_active_Dofs(name):
    if( (name == "anthrax")|(name == "anthrax_lowpoly")|(name == "bubonic")):
        return [7,8,9,10,11,12]
    elif((name == "seed")|(name == "half_anthrax")):
        return [10,11,12,13,14,15]

def get_right_active_Dofs(name):
    if((name == "anthrax")|(name == "anthrax_lowpoly")|(name == "bubonic")):
        return [15,16,17,18,19,20]
    elif((name == "seed")|(name == "half_anthrax")):
        return [35,36,37,38,39,40]

#TRINA_left_tool_link_N = 16
#TRINA_right_tool_link_N = 41 #seed
#TRINA_right_tool_link_N = 26 #anthrax
# TRINA_left_active_Dofs = [10,11,12,13,14,15]
# TRINA_right_active_Dofs = [35,36,37,38,39,40] #seed
#TRINA_right_active_Dofs = [20,21,22,23,24,25] #anthrax

def get_klampt_model_q(name,left_limb = [0]*6,right_limb = [0]*6,base = [0]*3):
    if((name == 'anthrax')|(name=="anthrax_lowpoly")|(name == "bubonic")):
        return base[0:2] + [0]*1 + [base[2]] + [0]*3 + list(left_limb) + [0]*2 + list(right_limb) + [0]
    elif(name == 'seed'):
        return base[0:3] + [0]*7 + list(left_limb) + [0]*19 + list(right_limb) + [0]*18
    elif(name == 'half_anthrax'):
        return base[0:3] + [0]*7 + list(left_limb) + [0]*19 + [1.16] + [0]*5 + [0]*18 #at a position that does not collide with left limb
    else:
        print("wrong model name used.")
        return None


###To add a new robot model:
# create a new world file contained the model_name
# update the functions defined where
# when using the motion api, specify the correct model name


####
# left_limb_gravity_upright = [-4.91,-4.91,-6.93672]  #R_upright_newlocal * left_limb_gravity_upright = new gravity vector
# right_limb_gravity_upright = [4.91,-4.91,-6.93672]
##This is for the wrench convertions
# R_local_global_upright_left = [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),-sqrt(0.5),-sqrt(0.25),-sqrt(0.25),0,sqrt(0.5),-sqrt(0.5)]
# R_local_global_upright_right = [-sqrt(0.5),-sqrt(0.25),sqrt(0.25),-sqrt(0.5),sqrt(0.25),-sqrt(0.25),0,-sqrt(0.5),-sqrt(0.5)]

## this is used when dealing with gravity vector
# R_URbase_global_upright_left = [sqrt(0.5),sqrt(0.25),sqrt(0.25),-sqrt(0.5),sqrt(0.25),sqrt(0.25),0,-sqrt(0.5),sqrt(0.5)] 
# R_URbase_global_upright_right = [sqrt(0.5),-sqrt(0.25),-sqrt(0.25),sqrt(0.5),sqrt(0.25),sqrt(0.25),0,sqrt(0.5),sqrt(0.5)]

