Ts = [[[-0.011249909559866876, 0.04027310229041789, -0.9991253758997424, -0.012546404743281269, 0.9991042663598395, 0.04041352087590054, 0.9998580035499612, 0.012990079810171208, -0.010734549995821463], [0.6309039484088876, -0.43976901721766304, 0.838730026822494]], [[-0.011189355146114355, 0.040241598473650726, -0.9991273252612505, -0.012587679114322261, 0.999105034980308, 0.040381671727581184, 0.9998581642742785, 0.013028539031093744, -0.010672792736031032], [0.630565072331815, -0.33988690383339126, 0.838916952740155]], [[-0.011171081540890235, 0.040197625558784866, -0.999129299858954, -0.012566316507134925, 0.9991070989836187, 0.04033723403980499, 0.9998586373216221, 0.013005985544172328, -0.010655970785220419], [0.6305513820837977, -0.2399704474350391, 0.8389367598991653]], [[-0.011254388693308645, 0.04025117279085265, -0.999126209156832, -0.012629044343645621, 0.9991040737342501, 0.04039253751120047, 0.999856912750073, 0.013072602517800201, -0.01073597174481304], [0.6304608984557425, -0.13998934103058105, 0.8389212206140592]], [[-0.011194056539079325, 0.04021510308736177, -0.9991283393948318, -0.012556203421934845, 0.9991065126590271, 0.04035490203118503, 0.9998585074168386, 0.012996993729027405, -0.010679105776267808], [0.6304185695819258, -0.04009358777008665, 0.8390195186877346]], [[-0.011221032157568842, 0.04024251750725216, -0.9991269329879955, -0.012576973011832832, 0.9991051206126355, 0.04038288889459364, 0.9998579440036367, 0.013019130166486858, -0.010704861630568387], [0.6302036291368822, 0.059674615342745645, 0.8392096476618488]], [[-0.011155790130173397, 0.040349313016111076, -0.9991233563908414, -0.012500844802021622, 0.9991018210947133, 0.04048802248153519, 0.9998596287608621, 0.012941561897906304, -0.010641369734923377], [0.4107457485341439, 0.05993861882014407, 0.8390280051046969]], [[-0.011043236632187366, 0.04005758080665728, -0.9991363456228607, -0.012550546716704787, 0.999113014878222, 0.04019536388768646, 0.9998602555866489, 0.012983594297025851, -0.010530696906325496], [0.41069179874734196, -0.03981292313016789, 0.838897142401923]], [[-0.011123472935952972, 0.04009439823058857, -0.9991339787938206, -0.012534714816186062, 0.9991116965844019, 0.040233054479080495, 0.9998595647761347, 0.012971390779970553, -0.010611020069402727], [0.4106240054375163, -0.13980683889777212, 0.838882150494045]], [[-0.011140008598667997, 0.04007808115691126, -0.9991344492205253, -0.012569100022000514, 0.9991118981762721, 0.04021731775299684, 0.9998589490188405, 0.013006242093262765, -0.010626369725963153], [0.41058219827541576, -0.23977309890774345, 0.8389100431028808]], [[-0.011168160142214554, 0.04014250836634261, -0.9991315485065505, -0.01261573788366599, 0.9991086801551261, 0.04028260662289159, 0.9998580476031036, 0.013054664328970402, -0.010651778375905457], [0.41058315804423934, -0.3397498530115589, 0.8389565601468397]], [[-0.011140895205715531, 0.04016302442561974, -0.9991310284056857, -0.012589685443125246, 0.9991082069367208, 0.04030248940370347, 0.9998586801515804, 0.013027751175070356, -0.010625319988688257], [0.4106161511421596, -0.4396913200685514, 0.8390155061789608]], [[-0.011285840736179484, 0.04011537656558774, -0.9991313158748855, -0.012509974069135604, 0.999111087547483, 0.040255872720354316, 0.999858055099657, 0.012953428221473752, -0.010773966291202046], [0.6299662032502013, -0.14010852125629603, 0.9394257103756449]]]



pts =[[-0.3381819959986832, 0.14844472030928932, 0.6957013633437513], [-0.23604311994610483, 0.15264941043547792, 0.6996928964262971], [-0.13298445320210567, 0.15757138625843273, 0.7027709992388668], [-0.0280559702449784, 0.15846190046610614, 0.6895802025553796], [0.07462775914554128, 0.16237180973630821, 0.6876962311596619], [0.1774703270192038, 0.16644250904041744, 0.6861987292495374], [0.1839877328286308, -0.05309269469222862, 0.7251689993849539], [0.07975660941941581, -0.05812316365259612, 0.7221656568361855], [-0.023787388181338086, -0.06437863444680893, 0.7354644438892498], [-0.12604088419079906, -0.06829655387336828, 0.7261623812286769], [-0.23061871280709273, -0.07376688465083804, 0.734455144013916], [-0.336322757219409, -0.07877816595573485, 0.738519332331028], [-0.025056366303230188, 0.14322578892102691, 0.5875655304800899]]


# import sys
# import numpy as np
# sys.path.append('../../')
# from SensorModule import Camera_Robot
# sys.path.append('../../Motion/')

# sys.path.remove('/opt/ros/kinetic/lib/python2.7/dist-packages')
# import cv2
# import cv2.aruco as aruco
# sys.path.append('/opt/ros/kinetic/lib/python2.7/dist-packages')

# sensor_module = Camera_Robot(robot = [],world = [], cameras =['zed_overhead'],ros_active = False, use_jarvis = False, mode = 'Physical')

# res = sensor_module.get_rgbd_images()
# color_frame = res['zed_overhead'][0]
# frame = np.asarray(color_frame)
# sensor_module.safely_close_all()
# frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
# #left 1080
# fx=1055.28
# fy=1054.69
# cx=1126.61
# cy=636.138
# k1=-0.0426844
# k2=0.0117943
# k3=-0.00548354
# p1=0.000242741
# p2=-0.000475926

# matrix_coefficients = np.array([[fx,0,cx],\
#     [0,fy,cy],\
#     [0,0,1]])

# distortion_coefficients = np.array([k1,k2,p1,p2,k3])

# distortion_coefficients = distortion_coefficients.flatten()
# gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Change grayscale


# aruco_dict = aruco.DICT_7X7_50
# aruco_dict = aruco.Dictionary_get(aruco_dict)
# parameters = aruco.DetectorParameters_create()  # Marker detection parameters
# # lists of ids and the corners beloning to each id
# corners, ids, rejected_img_points = aruco.detectMarkers(gray, aruco_dict,
#     parameters=parameters)
# if np.all(ids is not None):  # If there are markers found by detector
#     print(ids)
#     for i in range(len(ids)):  # Iterate in markers
#         # Estimate pose of each marker and return the values rvec and tvec---different from camera coefficients
#         if ids[i][0] == 1:
#             size = 0.052
#         else:
#             size = 0.052
#         rvec, tvec, markerPoints = aruco.estimatePoseSingleMarkers(corners[i], size, matrix_coefficients,
#                                                                     distortion_coefficients)
#         (rvec - tvec).any()  # get rid of that nasty numpy value array error
#         aruco.drawDetectedMarkers(frame, corners)  # Draw A square around the markers
#         aruco.drawAxis(frame, matrix_coefficients, distortion_coefficients, rvec, tvec, 0.01)  # Draw Axis
#         # cv2.imshow('frame',frame)
#         # cv2.waitKey(1000000)
#         marker_p = tvec[0][0]
#         print('p in camera:',marker_p)



# else:
#     print('no marker detected')

import numpy as np
from klampt.math import so3,se3
def point_fit_transform(a,b):
    assert len(a)==len(b)
    A = np.array(a).T
    B = np.array(b).T
    amean = np.average(A,axis=1)
    bmean = np.average(B,axis=1)
    A = A - np.column_stack([amean]*len(a))
    B = B - np.column_stack([bmean]*len(b))
    ABt = np.dot(A,B.T)
    U,W,Vt = np.linalg.svd(ABt)
    R = np.dot(Vt.T,U.T)
    return R,bmean-np.dot(R,amean)

ts = []
for ele in Ts:
    ts.append(ele[1])
Tcamera = point_fit_transform(pts,ts)
Tcamera = [so3.from_matrix(Tcamera[0]),Tcamera[1].tolist()]
print(Tcamera)

for (pt,EE) in zip(pts,ts):
    print(se3.apply(Tcamera,pt),EE)